// File:	my_pthread.c
// Author:	Yujie REN
// Date:	January 2019

// List all group member's name: Brian Schillaci, John Strauser
// username of iLab:
// iLab Server:

#include "my_pthread_t.h"

unsigned int idCount = 1;

// initialize priority queue for scheduling
TcbQueue schedQueue;

//initialize wait queue
TcbQueue waitQueue;

int firstTimeRunning = 0;

my_pthread_mutex_t * idCountLock;

// initialize return value queue
//ReturnQueue returnQueue;

// The current running thread
tcb *currentThread;
tcb *idleThread;

//Itimer interrupt using sighandler to call schedule()?
void timer_handler(int signum){
	//get current context
	schedule();
	//go back to old context
}

void init(){
	firstTimeRunning = 1;
	schedQueue.head = NULL;
	schedQueue.tail = NULL;
	//handle signal
	//signal(SIGALRM, timer_handler);
	//init timer
	struct itimerval timer;

   timer.it_value.tv_sec = 0;
   timer.it_value.tv_usec = 50;
   timer.it_interval.tv_sec = 0;
   timer.it_interval.tv_usec = 50;
   if(setitimer(ITIMER_REAL,&timer,NULL) != 0) {
   	//timer set error
   	printf("error setting timer\n");
   }
   //idle tcb
   
   idleThread = (tcb *) malloc(sizeof(tcb));
   idleThread->tid = (my_pthread_t)0;
   idleThread->run_time = 0;
   idleThread->priority = 0;
   // Create and initialize the context of this thread
   //idleThread->thread_context = malloc(sizeof(ucontext_t));
   if (getcontext(&(idleThread->thread_context)) != 0) {
      printf("Error in getcontext\n");
   }
   // Allocate space of stack for this thread to run
   //idleThread->thread_context.uc_stack.ss_sp = malloc(STACK_SIZE);
   //idleThread->thread_context.uc_stack.ss_size = STACK_SIZE;
   //idleThread->thread_context.uc_stack.ss_flags = 0;
   idleThread->thread_state = READY;
   idleThread->next = NULL;
   //enqueueTcb(idleThread, &schedQueue);
   //currentThread = idleThread;
   //idCountLock = (my_pthread_mutex_t*)malloc(sizeof(my_pthread_mutex_t));
   //my_pthread_mutex_init(idCountLock, NULL);
   
}
/* scheduler */
static void schedule() {
    // Every time when timer interrupt happens, your thread library
    // should be contexted switched from thread context to this
    // schedule function

    // Invoke different actual scheduling algorithms
    // according to policy (STCF or MLFQ)
	printTcbQueue(&schedQueue);
	//TODO - make sure a thread exists in at least one of the queues before calling next part
#ifndef MLFQ
    // Choose STCF
    if(schedQueue.head != NULL) {
    	printf("scheduling with stcf\n");
    	sched_stcf();
    }else {
    	printf("schedQueue == NULL\n");
    }
#else
    // Choose MLFQ
    /*
    if(queue1.head != NULL || queue2.head != NULL || ...) {
    	sched_mlfq();
    }
    */
#endif



}

void timer_interrupt() {
	struct itimerval timer;
	getitimer(ITIMER_REAL, &timer);
    timer.it_value.tv_usec = 0;
    setitimer(ITIMER_REAL, &timer, NULL);
}

/* Preemptive SJF (STCF) scheduling algorithm */
static void sched_stcf() {
	ucontext_t sched_ctx;
	if (currentThread != NULL && currentThread->thread_state == EXITED) {
		// If the current running thread has exited - free all of its allocated memory
		// and set the currentThread to null
		free(currentThread->thread_context.uc_stack.ss_sp);
		//free(currentThread->thread_context);
		free(currentThread);
		currentThread = NULL;
	} else if(currentThread != NULL && currentThread->thread_state != WAITING) {
    	currentThread->run_time += 1;
    	enqueueTcb(currentThread, &schedQueue);
    }
    
    tcb * old_thread = currentThread;
    struct sigaction interrupt; 
    
    // Sorting the to schedule queue, to find the least run time queue to schedule
    sortQueue(&schedQueue);
    
	// interrupt the current running context
	memset(&interrupt, 0, sizeof(interrupt)); 
    interrupt.sa_handler = &timer_interrupt; 
    sigaction(SIGALRM, &interrupt, NULL);
	
	// remove head of queue to get next thing to run
	tcb * next_to_run = dequeueTcb(&schedQueue);
	
	// if the next thread to run is null, theres nothing to schedule, return
	if (next_to_run == NULL) {
		return;
	}
	struct itimerval timer;
	setitimer(ITIMER_REAL, &timer, NULL);
	
	currentThread = next_to_run;
	currentThread->thread_state = RUNNING;
	
	if(old_thread == NULL){
		printf("swapped with null\n");
    	swapcontext(&sched_ctx,&(next_to_run->thread_context));
    }else {
		printf("swapped with NOT null\n");
    	swapcontext(&(old_thread->thread_context), &(next_to_run->thread_context));
    }
    
    
}

/* Preemptive MLFQ scheduling algorithm */
static void sched_mlfq() {
    // Your own implementation of MLFQ
    // (feel free to modify arguments and return types)
		//TODO - make sure the higher the priority, the lower the running time slice

    // YOUR CODE HERE
    //if current thread is not null or not exited
    	//add to queue one level below current
    //if(currentThread != NULL || currentThread->thread_state != EXITED) {
    //	enqueueTcb(currentThread,&schedQueue);
    //}
    //get thread with shortest run time from highest queue
    	//set as current thread
    	//dequeue
    /*
    if(queue1.head != NULL) {
    	currentThread = queue1.head;
    }else if(queue2.head != NULL) {
    	currentThread = queue2.head;
    }else if(queue3.head != NULL) {
    	currentThread = queue3.head;
    }else{
    	currentThread = queue4.head;
    }
    */
    //dequeueTcb(&schedQueue);

    //set itimer for interrupt?
    //TODO - determine if needed

    //context switch to new thread
    //setcontext(currentThread->thread_context);
}

/* create a new thread */
int my_pthread_create(my_pthread_t *thread, pthread_attr_t *attr,
                      void *(*function)(void *), void *arg) {
	// If this is the first time calling pthread create, we need to create an initial thread
	if (firstTimeRunning == 0) {
		init();
	}
	printf("thread: counter[i] = %d\n",*((int*) arg));
    // Create Thread Control Block
    tcb *controlBlock = (tcb *) malloc(sizeof(tcb));
	//my_pthread_mutex_lock(idCountLock);
	//*thread = ++idCount;
	//my_pthread_mutex_unlock(idCountLock);
    controlBlock->tid = idCount++;
    controlBlock->run_time = 0;
    controlBlock->priority = 0;

    // Create and initialize the context of this thread
    //controlBlock->thread_context = (ucontext_t *) malloc(sizeof(ucontext_t));

    if (getcontext(&(controlBlock->thread_context)) != 0) {
        printf("Error in getcontext\n");
        return -1;
    }
    // Allocate space of stack for this thread to run
    controlBlock->thread_context.uc_stack.ss_sp = malloc(STACK_SIZE);
    controlBlock->thread_context.uc_stack.ss_size = STACK_SIZE;
    controlBlock->thread_context.uc_stack.ss_flags = 0;

    if (arg != NULL) {
        makecontext(&(controlBlock->thread_context), (void *) function, 1, arg);
    } else {
        makecontext(&(controlBlock->thread_context), (void *) function, 0);
    }

    controlBlock->thread_state = READY;
    controlBlock->next = NULL;

    // Push this thread into run queue
    if (enqueueTcb(controlBlock, &schedQueue) == -1) {
        printf("Error inserting threading into queue.");
        return -1;
    }

    // Call yield to start scheduling
    my_pthread_yield();
    return 0;
};

/* give CPU pocession to other user level threads voluntarily */
int my_pthread_yield() {
    // Save context of this thread to its thread control block
    // Switch from thread context to scheduler context

    struct itimerval timer;
    getitimer(ITIMER_REAL, &timer);
    timer.it_value.tv_usec = 0;
    setitimer(ITIMER_REAL, &timer, NULL);

    // call the schedule function
    schedule();

    return 0;
};

/* terminate a thread */
void my_pthread_exit(void *value_ptr) {
    // Steps:
    // 1. get the current running thread
    //		- stored as global variable, no need to grab separately
    // 2: check for any threads that are waiting on this thread
    //		- if change these threads state to ready and put in run queue
    tcb *temp = waitQueue.head;
    while (temp != NULL) {
        if (temp->joinWait->tid == currentThread->tid) {
            temp->thread_state = READY;
            enqueueTcb(temp, &schedQueue);
            //break or check rest of queue
        }

        temp = temp->next;
    }
    // 3: put value_ptr into a list of return values (if it isn't null)
    if (value_ptr != NULL) {
        //TODO save returnVal
    } else {
        //TODO free returnVal?
        currentThread->returnVal = NULL;
    }
    // 4: mark this thread as exited, remove from running queue
    currentThread->thread_state = EXITED;
    dequeueTcb(&schedQueue);

    //TODO free tcb


    my_pthread_yield();
};

/* wait for thread termination */
int my_pthread_join(my_pthread_t thread, void **value_ptr) {
    // Waiting for a specific thread to terminate
    // Once this thread finishes,
    // Deallocated any dynamic memory created when starting this thread


    // Steps:
    // 2. user the @param thread to find the tid of the thread to join
    // 3. if this thread we are trying to join exists in the running queue, this means
    //    it isn't done yet. Change the status of the current running thread to waiting.
    // 4. if not, then the thread has exited and we can join it and get it's return value
    // make sure to free the return value pointer
    tcb * waitOn = findTCB(thread, &schedQueue);
    if (waitOn == NULL) {
		waitOn = findTCB(thread, &waitQueue);
	}
	/*
	if (waitOn != NULL) {
		currentThread->joinWait = waitOn;
        currentThread->thread_state = WAITING;
        enqueueTcb(currentThread, &waitQueue);
        my_pthread_yield();
	}
    return 0;
    */
    while (waitOn->thread_state != EXITED)
    {
        my_pthread_yield();
    }
    waitOn->returnVal = value_ptr;
};

tcb *findTCB(my_pthread_t tid, TcbQueue * queue) {
    //look through queues for tid

    tcb *temp = (*queue).head;
    while (temp != NULL) {
        if (temp->tid == tid) {
            return temp;
        }
        temp = temp->next;
    }
    return NULL;
}

/* initialize the mutex lock */
int my_pthread_mutex_init(my_pthread_mutex_t *mutex,
                          const pthread_mutexattr_t *mutexattr) {
    if (mutex->initialized == 1) {
        return EBUSY;
    }
    mutex->lock = 0;
    mutex->initialized = 0;
    mutex->owner = 0;
    mutex->destroyed = 0;
    mutex->holder = NULL;
    return 0;
};

/* aquire the mutex lock */
int my_pthread_mutex_lock(my_pthread_mutex_t *mutex) {
    // Use the built-in test-and-set atomic function to test the mutex
    // If mutex is acquired successfuly, enter critical section
    // If acquiring mutex fails, push current thread into block list
    // and context switch to scheduler

    if (mutex->destroyed == 1) {
        // Can't acquire a destroyed mutex lock
        return EBADF;
    }

    while (__sync_lock_test_and_set(&mutex->lock, 1) == 1) {
		currentThread->thread_state = WAITING;
        my_pthread_yield();
    }

    // Set the owner thread id and holding thread block of this mutex
    //printf("current = %p\n",currentThread);
    mutex->owner = currentThread->tid;
    mutex->holder = currentThread;

    return 0;
};

/* release the mutex lock */
int my_pthread_mutex_unlock(my_pthread_mutex_t *mutex) {
    // Release mutex and make it available again.
    // Put threads in block list to run queue
    // so that they could compete for mutex later.

    //TODO - put threads in block list?

    // Case where the lock is still in use by another thread
    if (mutex->owner != currentThread->tid) {
        return EBUSY;
    }

    // Release this mutex lock
    mutex->owner = 0;
    __sync_lock_release(&mutex->lock);
    return 0;
};


/* destroy the mutex */
int my_pthread_mutex_destroy(my_pthread_mutex_t *mutex) {
    // Deallocate dynamic memory created in my_pthread_mutex_init
    if (mutex->lock == 1) {
        return EBUSY;
    }

    // Set this mutex to destroyed, remove the owner, and uninitialize it
    mutex->destroyed = 1;
    mutex->owner = 0;
    mutex->initialized = 0;
    return 0;
};

tcb * dequeueTcb(TcbQueue * queue) {
    if ((*queue).head != NULL) {
        return (*queue).head;
	} else {
		return NULL;
	}
}

int enqueueTcb(tcb *toInsert, TcbQueue *queue) {
    // Case the queue is empty
    if ((*queue).head == NULL) {
    	if(toInsert == NULL) {
    		printf("toInsert = NULL\n");
    		return -1;
    	}
        (*queue).head = toInsert;
        (*queue).tail = toInsert;
        (*queue).tail->next = NULL;
    }
        // Add to the end of the queue
    else {
        (*queue).tail->next = toInsert;
        (*queue).tail = toInsert;
        (*queue).tail->next = NULL;
    }
}

/*int main(){
	
	TcbQueue testQueue;
	testQueue.head=NULL;
	testQueue.tail=NULL;
	
	tcb *tcb1 = (tcb *) malloc(sizeof(tcb));
   tcb1->tid = (my_pthread_t)1;
   tcb1->next = NULL;
   
   tcb *tcb2 = (tcb *) malloc(sizeof(tcb));
   tcb2->tid = (my_pthread_t)2;
   tcb2->next = NULL;
   
   tcb *tcb3 = (tcb *) malloc(sizeof(tcb));
   tcb3->tid = (my_pthread_t)3;
   tcb3->next = NULL;
	
	enqueueTcb(tcb1, &testQueue);
	printTcbQueue(&testQueue);
	enqueueTcb(tcb2, &testQueue);
	printTcbQueue(&testQueue);
	enqueueTcb(tcb3, &testQueue);
	printTcbQueue(&testQueue);
	
	tcb * t = findTCB(2, &testQueue);
	printf("t: %d tcb2: %d\n", t->tid, tcb2->tid);
	tcb * t1 = findTCB(20, &testQueue);
	printf("%p\n", t1);

	return 0;
}*/

void sortQueue(TcbQueue * queue){
	//sort head of queue to be lowest run_time
	//TODO
}

// Helper function to print out the queues
void printTcbQueue(TcbQueue * queue) {
    tcb *ptr = (*queue).head;
    printf("[");
    while (ptr != NULL) {
        printf("%d, ", ptr->tid);
        ptr = ptr->next;
    }
    printf("]\n");
}
